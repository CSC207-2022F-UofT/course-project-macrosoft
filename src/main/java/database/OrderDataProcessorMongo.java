package database;

import entities.Food;
import entities.Order;
import entities.OrderItem;
import interactors.DocumentOrderConverter;
import com.mongodb.client.model.Filters;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;

import java.util.ArrayList;
import java.util.Date;
import java.util.Dictionary;
import java.util.List;
import java.util.stream.Collectors;

public class OrderDataProcessorMongo implements OrderDataGateway {
    MongoCollectionFetcher mongoCollectionFetcher;
    public OrderDataProcessorMongo(MongoCollectionFetcher fetcher) {
        this.mongoCollectionFetcher = fetcher;
    }

    /**
     * @param orderList
     * @return
     */
    @Override
    public void save(Dictionary<ObjectId, Integer> orderList) {

    }

    /**
     * @param orderList
     * @return
     */
    @Override
    public void delete(Dictionary<ObjectId, Integer> orderList) {

    }

    /**
     * @param orderList
     * @return
     */
    @Override
    public void create(Dictionary<ObjectId, Integer> orderList, ObjectId resId, ObjectId userId) {
        FoodDataGateway foodDataGateway = new FoodDataMongo(mongoCollectionFetcher);

        ArrayList<OrderItem> foodItemList = new ArrayList<>();
        for (ObjectId foodItemId : (List<ObjectId>)orderList.keys()) {
            int quantity = orderList.get(foodItemId);
            OrderItem orderItem;
            Food food = foodDataGateway.getFood(foodItemId, resId);
            if(food != null){
                orderItem = new OrderItem(foodItemId, food, quantity);
                foodItemList.add(orderItem);
            }
        }

        Order newOrder = new Order(
                new ObjectId(),
                new Date(),
                resId,
                userId,
                foodItemList,
                "Created");

        Document orderDoc = this.convertOrderToDocument(newOrder);

        mongoCollectionFetcher.getCollection("Orders")
                .insertOne(orderDoc);
    }

    /**
     * @return
     */
    @Override
    public List<Order> findAll() {
        List<Order> orders = new ArrayList<>();

        mongoCollectionFetcher.getCollection("Orders")
                .find()
                .map(doc -> convertDocumentToOrder((Document) doc))
                .forEach(order -> orders.add((Order) order));

        return orders;
    }

    /**
     * @param userId
     * @return
     */
    @Override
    public List<Order> findAllByUser(ObjectId userId) {
        Bson queryFilter = Filters.eq("userID", userId);

        List<Order> orders = new ArrayList<>();

        mongoCollectionFetcher.getCollection("Orders")
                .find(queryFilter)
                .map(doc -> DocumentOrderConverter.convertDocumentToOrder((Document) doc))
                .forEach(order -> orders.add((Order) order));

        return orders;
    }

    /**
     * @param restaurantId
     * @return
     */
    @Override
    public List<Order> findAllByRestaurant(ObjectId restaurantId) {
        Bson queryFilter = Filters.eq("restaurantID", restaurantId);

        List<Order> orders = new ArrayList<>();

        mongoCollectionFetcher.getCollection("Orders")
                .find(queryFilter)
                .map(doc -> convertDocumentToOrder((Document) doc))
                .forEach(order -> orders.add((Order) order));

        return orders;
    }

    /**
     * @param id
     * @return
     */
    @Override
    public Order findById(ObjectId id) {
        Bson queryFilter = Filters.eq("_id", id);

        List<Order> orders = new ArrayList<>();

        mongoCollectionFetcher.getCollection("Orders")
                .find(queryFilter)
                .map(doc -> convertDocumentToOrder((Document) doc))
                .forEach(order -> orders.add((Order) order));

        if (orders.size() > 0)
            return orders.get(0);
        else
            return null;
    }

    public Order convertDocumentToOrder(Document document) {
        FoodDataGateway foodDataGateway = new FoodDataMongo(new MongoCollectionFetcher());
        List<OrderItem> items = document.getList("items", Document.class)
                .stream()
                .map(doc ->
                        new OrderItem(
                                doc.getObjectId("foodItemID"),
                                foodDataGateway.getFood(doc.getObjectId("foodItemID"), document.getObjectId("restaurantID")),
                                doc.getInteger("numberOfItem")))
                .collect(Collectors.toList());

        return new Order(document.getObjectId("_id"),  // ObjectId _id is auto-generated by DB for this order
                document.getDate("orderDate"),
                document.getObjectId("restaurantID"),
                document.getObjectId("userID"),
                items,
                document.getString("orderStatus"));
    }

    public Document convertOrderToDocument(Order order) {
        List<Document> items = order.getItems().stream()
                // filter out OrderItems
                .filter(c -> c instanceof OrderItem)
                // cast each OrderItem
                .map(c -> (OrderItem) c)
                // map each OrderItem to a Document
                .map(c -> new Document("foodItemID", c.getFoodItemID()).append("numberOfItem", c.getNumberOfItem()))
                // use the toList Collector to collect all Documents in the map into a List
                .collect(Collectors.toList());

        Document doc = new Document("orderDate", order.getOrderDate())
                .append("restaurantID", order.getRestaurantID())
                .append("userID", order.getUserID())
                .append("items", items)
                .append("orderStatus", order.getOrderStatus());

        return doc;
    }
}
